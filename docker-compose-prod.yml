version: '3'
services:
  app_server:
    build:
      context: .
    command: gunicorn -w 4 -b 0.0.0.0 app_server.controllers.api:app
    env_file:
      - .env.prod
    restart: unless-stopped
    ports:
      - "8000:8000"
    depends_on:
      - postgres
  celery_worker:
    build:
      context: .
    command: celery -A tasks.app worker --loglevel=INFO --concurrency=2
    env_file:
      - .env.prod
    restart: unless-stopped
    depends_on:
      - redis_container
      - rabiitmq_container
  celery_beat:
    build:
      context: .
    command: celery -A tasks.app worker --loglevel=INFO --beat -s /opt/ws/beat/beat_db
    env_file:
      - .env.prod
    restart: unless-stopped
    volumes:
      - beat_celery_prod:/opt/ws/beat
    depends_on:
      - redis_container
      - rabiitmq_container
  webhook_handler_container:
    build:
      context: .
    command: python3 webhook_handler.py
    env_file:
      - .env.prod
    restart: on-failure
    depends_on:
      - rabiitmq_container
    links:
      - rabiitmq_container

  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    volumes:
      - postgres-db-volume_ws_prod:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: always
    env_file:
      - .env.prod
  redis_container:
    image: redis:latest
    ports:
      - 6379:6379
    command: redis-server --save 20 1 --loglevel warning
    volumes:
      - cache_ws_prod:/data
  rabiitmq_container:
    image: rabbitmq:3.8-management-alpine
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - rabbit_data_ws_prod:/var/lib/rabbitmq/
      - rabbit_log_ws_prod:/var/log/rabbitmq
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:15672" ]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  postgres-db-volume_ws_prod:
  rabbit_data_ws_prod:
  rabbit_log_ws_prod:
  cache_ws_prod:
  beat_celery_prod:
